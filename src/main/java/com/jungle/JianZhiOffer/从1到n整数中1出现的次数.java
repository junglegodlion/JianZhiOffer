package com.jungle.JianZhiOffer;

/**
 * 链接：https://www.cnblogs.com/aimi-cn/p/11510770.html
 * 在分析之前，首先需要知道一个规律：
 *
 * 从 1 至 10，在它们的个位数中，数字1出现了 1 次。
 * 从 1 至 100，在它们的十位数中，数字1出现了 10 次。
 * 从 1 至 1000，在它们的百位数中，数字1出现了 100 次。
 * 依此类推，从 1 至 10i，在它们右数第二位中，数字1出现了10 ^ (i - 1)次。
 * 对于 n = 2134,要找到从1 ~ 2134这2134个数字中所有1的个数。我们可以对2134进行逐位分析：
 *
 * (1)在个位上，从1~2130，包含213个10，因此数字1出现了213次，剩下的数字2131、2132、2133、2134中个位数上只有2131包含树脂字1，剩下的都不包含。所以个位数上的数字1的总数为213 + 1 = 214。
 *
 * (2)在十位上，从1 ~ 2100，包含了21个100，因此数字1出现了21 * 10 = 210次，剩下的数字从2101 ~ 2134，只有2110 ~ 2119这10个数字中十位的数字为1，所以十位上的数字1的总数为210 + 10 = 220。
 *
 * (3)在百位上，从1 ~ 2000，包含了2个1000，因此数字1出现了2 * 100 = 200次，剩下的数字从2001 ~ 2134，只有2100 ~ 2134这35个数字中的百位的数字为1，所以百位数上数字1的总数为200 + 35= 235。
 *
 * (4)在千位上，包含了0个10000，因此数字1出现了0 * 1000 = 0次，剩下的数字中只有1000 ~ 1999这1000个数字中的千位的数字为1，所以千位上的数字1的总数为1000。
 *
 * 因此从1 ~ 2134这n个数字中，数字出现的总的次数为 214 + 220 + 235 +1000 = 1669。
 *
 * 总结一下以上的步骤，可以得到这么一个规律：
 *
 * 对于数字n，计算它的第i(i从1开始，从右边开始计数)位数上包含的数字1的个数：
 *
 * 假设第i位上的数字为x的话，则
 *
 * 1.如果x > 1的话，则第i位数上包含的1的数目为：(高位数字 + 1）* 10 ^ (i-1) (其中高位数字是从i+1位一直到最高位数构成的数字)
 *
 * 2.如果x < 1的话，则第i位数上包含的1的数目为：(高位数字 ）* 10 ^ (i-1)
 *
 * 3.如果x == 1的话，则第i位数上包含1的数目为：(高位数字) * 10 ^ (i-1) +(低位数字+1) (其中低位数字时从第i - 1位数一直到第1位数构成的数字)
 */
public class 从1到n整数中1出现的次数 {

    public int NumberOf1Between1AndN_Solution(int n) {
        int allcount = 0;
        for (int i = 10; i <= n*10; i=i*10) {
            System.out.println("i="+i);
            int count;
            int left = n/(i);
            System.out.println("left="+left);
            int temp = n%i;
            int med = temp/(i/10);
            System.out.println("med="+med);
            int right =temp%(i/10);
            System.out.println("right="+right);
            if (med>1) {
                count = (left+1)*(i/10);
            } else if(med<1) {

                count = (left)*(i/10);
            }else {

                count = (left)*(i/10)+(right+1);
            }
            System.out.println("count="+count);
            System.out.println("=========================");
            allcount = allcount + count;
        }

        return allcount;
    }

    public static void main(String[] args) {
        System.out.println(String.valueOf(100).length());
    }
}
